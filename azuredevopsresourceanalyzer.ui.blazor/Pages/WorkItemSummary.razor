@page "/worksummary"
@using azuredevopsresourceanalyzer.core.Models
@using azuredevopsresourceanalyzer.ui.blazor.Application.ViewModels
@inject WorkSummaryViewModel ViewModel
@using azuredevopsresourceanalyzer.ui.blazor.Components


<div class="row">
    <div class="col-md-12">
        <div class="form-row">
            <div class="col">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Organization" @bind="@ViewModel.Organization">
                    <div class="input-group-append">
                        @if (ViewModel.IsSearchingProjects)
                        {
                            <button class="btn btn-outline-secondary" type="button">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await ViewModel.SearchProjects())">
                                <span class="oi oi-magnifying-glass"></span>
                            </button>
                        }

                    </div>
                </div>
               
            </div>
            <div class="col">
                @if (ViewModel.Projects.Any())
                {
                    <select class="custom-select" id="projectInput" @bind="@ViewModel.Project">
                        @foreach (var item in ViewModel.Projects)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                }
                else
                {
                    if (!ViewModel.IsSearchingProjects)
                    {
                        <input type="text" class="form-control" id="projectInput" placeholder="Project" @bind="@ViewModel.Project">

                    }
                }
            </div>
            <div class="col">
                <input type="text" class="form-control" id="repositoryInput" placeholder="Team Filter" @bind="@ViewModel.TeamsFilter">
                       </div>
            <div class="col">
                <input type="date" class="form-control" id="startDateInput" placeholder="Start Date" @bind="@ViewModel.StartDate">
            </div>
            <div class="col">
                @if (@ViewModel.IsSearching)
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Loading...
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" id="searchButton" @onclick="@(async () => await ViewModel.Search())">Search</button>
                }
                <button class="btn btn-secondary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample" title="Filter results"
                        disabled="@(!ViewModel.AvailableWorkItemTypes.Any())">
                    <span class="oi oi-wrench"></span>
                </button>
            </div>
           
        </div>
    </div>
</div>
<div class="row">
    <p class="alert-danger">@ViewModel.Error</p>
</div>
<div class="row">
    <div class="col">
        <div class="collapse" id="collapseExample">
            <div class="card card-body">
                <p>Work Item Types</p>
                
                @foreach (var type in ViewModel.AvailableWorkItemTypes)
                {
                    var checkboxId = Guid.NewGuid().ToString();
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@checkboxId" @bind="@type.IsSelected">
                        <label class="form-check-label" for="@checkboxId">
                            @type.Name
                        </label>
                    </div>

                }

               
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Team</th>
                    <th>Work Items</th>
                    <th>Lifespan</th>
                    <th>Iterations</th>
                    <th>Contributors</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ViewModel.Results)
                {
                    <tr>
                        <td><NavigableItemComponent Item="@item.Team" /> </td>
                        <td>
                            <ul class="list-unstyled">
                                @foreach (var type in item.WorkItemTypeCounts.Where(t=>t.Visible))
                                {
                                    <li>
                                        <WorkItemTypeCountComponent Item="@type"/>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <WorkItemLifespanSummaryComponent Items="@item.LifespanMetrics"/>
                        </td>
                        <td>
                            <WorkItemIterationSummaryComponent Items="@item.Iterations"/>
                        </td>
                        <td>
                            <WorkItemContributorSummaryComponent Items="@item.Contributors"/>
                        </td>



                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code
{

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.Initialize();
        await base.OnInitializedAsync();
    }

}
